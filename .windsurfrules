# My Hardware is
- Makerfabs MaTouch_ESP32-S3 Parallel TFT with Touch 4.3" module V3.1
- Github Link: https://github.com/Makerfabs/ESP32-S3-Parallel-TFT-with-Touch-4.3inch/tree/main
- Hardware Diagrams Link: https://github.com/Makerfabs/ESP32-S3-Parallel-TFT-with-Touch-4.3inch/tree/main/hardware
- Wiki Link: https://wiki.makerfabs.com/MaTouch_S3_Parallel_4.3_TFT_with_Touch.html
- Hardware modifications: Installed R29 resistor to allow PWM backlight control via GPIO44

# Features:
- Controller: ESP32-S3-WROOM-1, PCB Antenna, 16MB Flash, 8MB PSRAM, ESP32-S3-WROOM-1-N16R8ï¼›
- Wireless: Wifi& Bluetooth 5.0
- LCD: 4.3 inch High Lightness IPS
- FPS: >30
- Resolution: 800*480
- LCD interface: RGB 565
- Touch Panel: 5 Points Touch, Capacitive
- Touch Panel Driver: GT911
- USB: Dual USB Type-C(one for USB-to-UART and one for native USB)
- USB to UART Chip: CP2104
- Power Supply: USB Type-C 5.0V(4.0V~5.25V)
- Button: Flash button and reset button
- Mabee interface: 1*I2C;1*GPIO
- MicroSD: Yes
- Arduino support: Yes
- Connected to the I2C interface: Mabee_TVOC and eCO2 SGP30 & Temperature and Humidity SHT31 module. 
- Connected to the GPIO interface: Mabee Light Sensor Module. 

# My Software is
- PlatformIO 
- ESP32-S3
- LVGL 9.2.2 
- lovyan03/LovyanGFX@^1.2.7
- ESP8266Audio
- Adafruit SGP30 Sensor
- Adafruit SHT31 Library

# PlatformIO Commands to use
- PlatformIO: `pio run` to build the code
- PlatformIO: `try { taskkill /F /IM pio.exe /T > $null 2>&1 } catch { } ; pio run -t upload` to upload the code to the ESP32-S3
- PlatformIO: `pio run -t monitor` to monitor the output of the ESP32-S3
- PlatformIO: `pio run -t clean` to clean the build directory
- PlatformIO: Use Ctrl+C to stop the monitor after you finished analyzing the output and before uploading new code

# Display Initialization Findings

## Working Display Configuration
The following Arduino_GFX initialization code works with the latest Arduino_GFX_Library v1.6.0:

```cpp
#include <Arduino_GFX_Library.h>
Arduino_ESP32RGBPanel *bus = new Arduino_ESP32RGBPanel(
        40 /* DE */, 41 /* VSYNC */, 39 /* HSYNC */, 42 /* PCLK */,
        45 /* R0 */, 48 /* R1 */, 47 /* R2 */, 21 /* R3 */, 14 /* R4 */,
        5 /* G0 */, 6 /* G1 */, 7 /* G2 */, 15 /* G3 */, 16 /* G4 */, 4 /* G5 */,
        8 /* B0 */, 3 /* B1 */, 46 /* B2 */, 9 /* B3 */, 1 /* B4 */,
        0 /* hsync_polarity */, 8 /* hsync_front_porch */, 4 /* hsync_pulse_width */, 8 /* hsync_back_porch */,
        0 /* vsync_polarity */, 8 /* vsync_front_porch */, 4 /* vsync_pulse_width */, 8 /* vsync_back_porch */,
        1 /* pclk_active_neg */, 16000000 /* prefer_speed */);

Arduino_RGB_Display *gfx = new Arduino_RGB_Display(
    800 /* width */, 480 /* height */, bus, 0 /* rotation */, true /* auto_flush */);
```

## Important Notes
- The code should follow best practices for embedded systems development.
- The code should be easy to read and understand.
- The code should be easy to maintain and update.
- The code should be easy to debug.
- Never change files under /lib/ui except /lib/ui/ui.h. These files were generated by the Squareline Studio UI editor.

